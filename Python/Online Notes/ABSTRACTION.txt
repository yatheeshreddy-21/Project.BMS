ABSTRACTION :

--> It is a phenomenon of hiding implementation from user by making
    them to work on its functionality.

--> It is used by project architects.

-->Before going to abstraction we should know the following terms:
   1) abstract method
   2) abstract class
   3) concrete class

1) abstract method:

--> It is a method,which consists of only function declaration but not 
    function definition

2) abstract class:

--> If class consists of atleast one abstract method in it,then we
    can call it as abstract class.

--> It is not possible to create object for abstract class.

3) concrete class :

--> If class does not consists of any abstract method then we
    can call it as concrete class.

--> it is possible to create objects for concrete class

How to create abstract method/abstract class? :

Syntax :

from abc import ABC,abstractmethod

class cname1(ABC):
	
	@abstractmethod
	def mname(args):
        	pass

class cname2(cname1):
	
	
	def mname(args):
        	[S.B]


Example:01

from abc import ABC,abstractmethod

class Demo1(ABC):

    @abstractmethod
    def msg():
        pass

    @abstractmethod
    def message():
        pass

class Demo2(Demo1):

    def msg(slef):
        print('Naruto')                   output :  Naruto
                                                    Goku
    def message(self):
        print('Goku')

ob=Demo2()
ob.msg()
ob.message()


Example:02

from abc import ABC,abstractmethod

class Atm_01(ABC):

    @abstractmethod
    def check_bal():
        pass

    @abstractmethod
    def deposite():
        pass

    @abstractmethod
    def withdrawl():
        pass

class Atm_02(Atm_01):

    def __init__(self,name,phno,pin):
        self.name=name
        self.phno=phno
        self.pin=pin
        self.bal=0

    def check_bal(self):
        x=int(input('Enter the pin :'))
        if x==self.pin:
            print('Available bal :',self.bal)
        else:
            print('Incorrect pin')

    def deposite(self):
        x=int(input('Enter the pin :'))
        if x==self.pin:
            amt=int(input('Enter the amount :'))
            self.bal+=amt
            print(f'Amount of {amt} has been deposited')
        else:
            print('Incorrect pin')

    def withdrawl(self):
        x=int(input('Enter the pin :'))
        if x==self.pin:
            amt=int(input('Enter the amount :'))
            if amt<=self.bal:
                self.bal-=amt
                print(f'Amount of {amt} has been withdrawn')
            else:
                print('Insufficient Balance')
        else:
            print('Incorrect pin')

    def display(self):
        print(self.name,self.phno)

    

c1=Atm_02('virat',8431353667,1818)
c2=Atm_02('john',99021105554,1234)

#output :

>>> c1.display()
virat 8431353667
>>> c1.check_bal()
Enter the pin :1567
Incorrect pin
>>> c1.check_bal()
Enter the pin :1818
Available bal : 0
>>> c1.deposite()
Enter the pin :1818
Enter the amount :7000
Amount of 7000 has been deposited
>>> c1.withdrawl()
Enter the pin :1818
Enter the amount :5000
Amount of 5000 has been withdrawn
>>> c1.check_bal()
Enter the pin :1818
Available bal : 2000
        


