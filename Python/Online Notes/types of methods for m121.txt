
TYPES OF METHODS :

There are three types of methods which can be stored inside class.

01)object method
02)class method
03)static method

01) object method: 

--> It is a method which is used to display/access and modify the object members.

To display: In object method we need to pass 'self' as first argument,
            that will take the address of the object.

To modify: We need to pass 'self' as first argument and that will take the 
           address of the object and 'new' as second argument for that 
           We can pass a new value which we are modifying.

We can call object method both with respect to class name and object name.

Syntax:         
            class_name.method_name(obj_name)
                        (OR)
              obj_name.method_name()

---> When we call object method with respect to obj_name,No need to pass
     value for self,by default it will take the obj_name.But,with classname
     we need to pass object name to self because class will be having 
     'n' no of objects.

Calling object methods :

To print:
	01) with class_name  :  class_name.method_name(object_name)

        02) with obj_name    :  obj_name.method_name()

	

To modify:
       01) with class_name  :  class_name.method_name(object_name,new)

       02) with obj_name    :  obj_name.method_name(new)

--> It is not mandatory to take new and self as arguments but according 
    to standards we need to take.

EXAMPLE :
class Bank:
    bname='SBI'
    bloc='Jayanagar'
    bifsc='SBIN007'

    def __init__(self,name,phno,accno):
        self.name=name
        self.phno=phno
        self.accno=accno

    def display(self):
        print(self.name,self.phno,self.accno)

    def ch_phno(self,new):
        self.phno=new

c1=Bank('John',8431353667,789456123)

#c1.display()
#Bank.display(c1)

c1.display()
c1.ch_phno(9902110556)
c1.display()


02) class method :

The methods which are used to access or to modify the members
of the class are called as class methods.

Syntax:
       
1) to create class method :

          @classmethod
          def mname(cls,arg1,arg2,....argn):
          		[S.B]

2)to call class method :
 
          cname.mname(arg1.....argn)
                   (OR)
          objname.mname(arg1....argn)

--> For any class method the first argument should always be 
    'cls' to assign the class address.

--> For any user defined class method we should decorate 
    method with the help of an inbuilt decorator called
    @classmethod.


EXAMPLE:

class Bank:
    bname='SBI'
    bloc='Jayanagar'
    bifsc='SBIN007'

    def __init__(self,name,phno,accno):
        self.name=name
        self.phno=phno
        self.accno=accno

    @classmethod
    def disp(cls):
        print(cls.bname,cls.bloc,cls.bifsc)

    @classmethod
    def ch_bloc(cls,new):
        cls.bloc=new

c1=Bank('John',8431353667,789456123)

#c1.disp()
#Bank.disp()

Bank.disp()
Bank.ch_bloc('Whitefield')
Bank.disp()



03) static method:

static method is neither a class method nor the object method
but it acts as supportive method for object and class methods.

Syntax:

1) to create static method:
   
        @staticmethod
        def mname(arg1....argn):
        	[S.B]

2) to call a static method

   cname.mname(args)
        (OR)
   objname.mname(args)

--> for any static method there is no need of having self or 
    cls as the first argument and static method should be 
    decorated using an inbuilt decorator called @staticmethod.

EXAMPLE: 

class Bank:
    bname='SBI'
    bloc='Jayanagar'
    bifsc='SBIN007'

    def __init__(self,name,phno,accno):
        self.name=name
        self.phno=phno
        self.accno=accno

    def display(self):
        print(self.name,self.phno,self.accno)

    def ch_phno(self):
        self.phno=self.get_in()

    @classmethod
    def disp(cls):
        print(cls.bname,cls.bloc,cls.bifsc)

    @classmethod
    def ch_bloc(cls):
        cls.bloc=cls.get_in()

    @staticmethod
    def get_in():
        return input('Enter the value :')

c1=Bank('John',8431353667,789456123)

c1.display()
c1.ch_phno()
c1.display()